#!/usr/bin/groovy

node {
    def root = pwd()
    def mvn = tool 'M3'

    stage("Setup") {
        deleteDir()
	sh "mkdir bfalg-shape"
	dir("bfalg-shape") {
        git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.ARTIFACT_STORAGE_CREDS}", usernameVariable: "USER", passwordVariable: "PASS"]]) {
            sh 'sed -i "s*CONDA_CHANNEL*`echo $CONDA_CHANNEL | sed -e "s/NEXUSUSER/${USER}/g" | sed -e "s/NEXUSPASS/${PASS}/g"`*g" environment.yml'
        }
	    def appvers = sh(script: """git describe --long --tags --always | sed 's/\\./-/'g""", returnStdout: true).trim()
	    def appName = "bfalg-shape-${appvers}"
	}
    }


    if(false){
    stage("Archive") {
        def archiveName="bfalg-shape.tgz"
        sh "tar -cvzf ${archiveName} shape/ ci/ manifest.jenkins.yml pzsvc-exec.config environment.yml Procfile"
        sh """
          mvn -X --settings ~/.m2/settings.xml deploy:deploy-file -Dfile=${archiveName} \
    		-DrepositoryId=nexus \
    		-Durl="${env.ARTIFACT_STORAGE_DEPLOY_URL}" \
    		-DgroupId="org.venice.beachfront" \
    		-DgeneratePom=false \
    		-Dpackaging=tgz \
    		-Dmaven.repo.local="${root}/.m2/repository" \
    		-DartifactId=bfalg-shape \
    		-Dversion=${appvers} \
    	  """
        sh "rm ${archiveName}"
    }}
    stage("Conda Build") {
	sh "mkdir -p share/bfalg-shape && cp -a bfalg-shape/* share/bfalg-shape"
        dir("bfalg-shape/docker") {
            sh "sed -i s*SED_ROOT*${root}*g *"
	    sh "docker-compose rm -f --all"
            sh "docker-compose up --build --no-color"
        }
	sh "mv share/miniconda2 ."
    }
stage("Dependency Check") {
        withCredentials([
          [$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]
        ]) {
		dir("bfalg-shape") {
	            sh """
        	      /jslave/dependency-check/dependency-check/bin/dependency-check.sh --version
            	      /jslave/dependency-check/dependency-check/bin/dependency-check.sh --project "bfalg-shape" --scan '.' --format "XML" --enableExperimental --disableBundleAudit
	              /bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}
	    	    """
		}
	}
    }
    stage("Fortify Scans") {
        withCredentials([
          [$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]
        ]) {
		dir("bfalg-shape") {
			sh """
          		  export PATH="$root/miniconda2/bin:$PATH" && source activate bfalg-shape
          		  /opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER} -python-path `python -c "import sys;print ':'.join(sys.path)"` {*.py,**/*.py}
          		  /opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER} -scan -python-path `python -c "import sys;print ':'.join(sys.path)"` -Xmx1G -f fortifyResults-${env.BUILD_NUMBER}.fpr
	    		  /bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@fortifyResults-${env.BUILD_NUMBER}.fpr ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}
          		  source deactivate
          		  ls
        		"""
       		}
	}
    }
}
