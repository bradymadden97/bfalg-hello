#!/usr/bin/groovy

node {
    def root = pwd()
    def mvn = tool 'M3'
    def zapHome = tool 'ZAProxy_v2_5_0'
    def golangTool = tool 'golang_1.7'
    def nodejs = tool 'NodeJS_6'
    stage("Setup") {
        deleteDir()
        sh "mkdir -p bfalg-shape"
        sh "mkdir -p ${root}/gopath/src/pz-flex"
        dir("bfalg-shape") {
            git url: "https://github.com/venicegeo/bfalg-shape", branch: "master"
        }
        dir("gopath/src/pz-flex") {
            git url: "https://github.com/venicegeo/pz-flex", branch: "master"
        }
    }
    def appvers = ""
    dir("bfalg-shape") {
        appvers = sh(script: """git describe --long --tags --always | sed 's/\\./-/'g""", returnStdout: true)
    }
    appvers = appvers.trim()
    def appName = "bfalg-shape"

if(false){
    stage("Build Alg") {
        dir("bfalg-shape/docker") {
            sh """
              docker-compose rm -f --all
              docker-compose up --build --no-color
            """
        }
    }}
    stage("Build Flex") {
        withEnv([
          "PATH+=${golangTool}/bin:${root}/gopath/bin",
          "GOROOT=${golangTool}",
          "GOPATH=${root}/gopath"
        ]) {
            sh """
              cd ${root}/gopath/src/pz-flex
              go build
            """
        }
    }
    stage("Archive") {
        sh """
          cp gopath/src/pz-flex/pz-flex .
          cp gopath/src/pz-flex/Procfile .
          rm -rf gopath
          cp -r bfalg-shape/shape .
          cp bfalg-shape/manifest.jenkins.yml .
          cp bfalg-shape/config.json .
          cp bfalg-shape/environment.yml .
          rm -rf bfalg-shape*
          git clone https://github.com/venicegeo/wh-sandbox channel
          rm -rf channel/.git
          rm channel/LICENSE
          rm channel/.gitignore
        """

        def archiveName="bfalg-shape.tgz"
        sh """
          tar -cvzf ${archiveName} *
        """
        if (false) {
        sh """
          mvn -X --settings ~/.m2/settings.xml deploy:deploy-file -Dfile=${archiveName} \
    		-DrepositoryId=nexus \
    		-Durl="${env.ARTIFACT_STORAGE_DEPLOY_URL}" \
    		-DgroupId="org.venice.beachfront" \
    		-DgeneratePom=false \
    		-Dpackaging=tgz \
    		-Dmaven.repo.local="${root}/.m2/repository" \
    		-DartifactId=bfalg-shape \
    		-Dversion=${appvers} \
    	  """
        }
        sh "rm ${archiveName}"
    }
    stage("Phase One Deploy") {
        if(!fileExists('.cf')) {
            sh "mkdir -p .cf"
        }
        withEnv([
          "CF_HOME=.cf"
        ]) {
            withCredentials([
              [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
            ]) {
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}
                  cf push ${appName} -f manifest.jenkins.yml --hostname ${appName} -d ${env.PHASE_ONE_PCF_DOMAIN} --no-start -u none
                  cf set-env ${appName} SPACE ${env.PHASE_ONE_PCF_SPACE}
                  cf set-env ${appName} DOMAIN ${env.PHASE_ONE_PCF_DOMAIN}
                  cf set-env ${appName} LD_LIBRARY_PATH /home/vcap/app/.cloudfoundry/0/conda/envs/dep_env/lib:/home/vcap/app/.cloudfoundry/0/conda/lib:/home/vcap/app/lib
                  cf restage ${appName}
                """

                //try {
                  sh "cf start ${appName}"
                //} catch (Exception e) {
                  //sh "cf logs --recent ${appName}"
                  //sh "cf delete ${appName} -f"
                  //error("Error during application start. Deleting ${appName} and failing the build.")
                //}
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}
                """
                def legacyAppNames = sh(script: """cf routes | grep \"bfalg-shape \" | awk '{print \$4}'""", returnStdout: true)
                sh "cf map-route ${appName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname bfalg-shape"
                // Remove legacy applications
                for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
                    def legacyAppName = legacyApp.toString().trim()
                    if(legacyAppName != appName) {
                        sh "cf unmap-route ${legacyAppName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname ${legacyAppName}"
                        sh "cf delete -f ${legacyAppName}"
                    }
                }
            }
        }
    }
}
